{"version":3,"sources":["components/MapContainer.js","App.js","serviceWorker.js","index.js"],"names":["MapContainer","props","selectedArea","spots","useState","lat","lng","marker","setMarker","mapUrls","Map","center","zoom","style","width","onClick","e","latlng","ScaleControl","metric","imperial","TileLayer","url","attribution","WMSTileLayer","Marker","position","undefined","map","spot","Tooltip","name","Wrapper","styled","div","RightSectionWrapper","Input","input","App","id","areaName_eng","areaName_kor","location","cityName_eng","cityName_kor","municipalLevelDivisionCode","crops","crops_kor","cropsInfo","name_kor","icon","mapInfo","coordinate","setFiles","setSpots","type","onChange","selectedFile","target","files","fileReader","FileReader","onload","event","data","result","workbook","XLSX","read","SheetNames","forEach","sheet","rowObject","utils","sheet_to_row_object_array","Sheets","jsonObject","JSON","stringify","jsObject","parse","readAsBinaryString","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"obAuDeA,G,MA3CM,SAACC,GACYA,EAAxBC,aADuB,IACTC,EAAUF,EAAVE,MADQ,EAEFC,mBAAS,CACnCC,IAAK,EACLC,IAAK,IAJuB,mBAEvBC,EAFuB,KAEfC,EAFe,KAOxBC,EAEI,6DAFJA,EAGO,iEAOb,OACE,kBAACC,EAAA,EAAD,CACEC,OAAQ,CAAC,QAAS,UAClBC,KAAM,KACNC,MAAO,CAAEC,MAAO,QAChBC,QATe,SAACC,GAClBR,EAAUQ,EAAEC,UAUV,kBAACC,EAAA,EAAD,CACEC,QAAQ,EACRC,UAAU,EACVF,cAAc,IAEhB,kBAACG,EAAA,EAAD,CAAWC,IAAKb,EAAmBc,YAAY,WAC/C,kBAACC,EAAA,EAAD,CAAcF,IAAKb,IACnB,kBAACgB,EAAA,EAAD,CAAQC,SAAU,CAACnB,EAAOF,IAAKE,EAAOD,YAC3BqB,IAAVxB,EACGA,EAAMyB,KAAI,SAACC,GAAD,OACR,kBAACJ,EAAA,EAAD,CAAQC,SAAU,CAACG,EAAKxB,IAAKwB,EAAKvB,MAChC,kBAACwB,EAAA,EAAD,KAAUD,EAAKE,UAGnB,Q,wdC5CV,IAAMC,EAAUC,IAAOC,IAAV,KAMPC,EAAsBF,IAAOC,IAAV,KAQnBE,EAAQH,IAAOI,MAAV,KA4DIC,MApDf,WAAgB,IAAD,EAC2BlC,mBAAS,CAC/CmC,GAAI,EACJC,aAAc,QACdC,aAAc,2BACdC,SAAU,CAAEC,aAAc,GAAIC,aAAc,IAC5CC,2BAA4B,KAC5BC,MAAO,GACPC,UAAW,GACXC,UAAW,CAAC,CAAET,GAAI,KAAMR,KAAM,KAAMkB,SAAU,KAAMC,KAAM,OAC1DC,QAAS,CACPC,WAAY,CAAE/C,IAAK,QAASC,IAAK,UACjCM,KAAM,QAZG,mBACNV,EADM,aAeaE,mBAAS,KAftB,mBAeCiD,GAfD,aAgBajD,qBAhBb,mBAgBND,EAhBM,KAgBCmD,EAhBD,KAwCb,OACE,oCACE,kBAACtB,EAAD,KACE,kBAAC,EAAD,CAAc9B,aAAcA,EAAcC,MAAOA,IACjD,kBAACgC,EAAD,KACE,kBAACC,EAAD,CAAOmB,KAAK,OAAOC,SA3BL,SAACxC,GACrB,IAAMyC,EAAezC,EAAE0C,OAAOC,MAAM,GAC9BC,EAAa,IAAIC,WACvBD,EAAWE,OAAS,SAAUC,GAC5B,IAAIC,EAAOD,EAAML,OAAOO,OAEpBC,EAAWC,IAAKC,KAAKJ,EAAM,CAC7BT,KAAM,WAERW,EAASG,WAAWC,SAAQ,SAACC,GAC3B,IAAIC,EAAYL,IAAKM,MAAMC,0BACzBR,EAASS,OAAOJ,IAEdK,EAAaC,KAAKC,UAAUN,GAC5BO,EAAWF,KAAKG,MAAMJ,GAC1BvB,EAAS0B,GACTzB,EAASyB,OAGbnB,EAAWqB,mBAAmBxB,UCrDdyB,QACW,cAA7BC,OAAOzC,SAAS0C,UAEe,UAA7BD,OAAOzC,SAAS0C,UAEhBD,OAAOzC,SAAS0C,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ec749218.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Map,\r\n  TileLayer,\r\n  WMSTileLayer,\r\n  Marker,\r\n  Tooltip,\r\n  Popup,\r\n  ScaleControl,\r\n} from \"react-leaflet\";\r\nimport \"./MapContainer.css\";\r\n\r\nconst MapContainer = (props) => {\r\n  const { selectedArea, spots } = props;\r\n  const [marker, setMarker] = useState({\r\n    lat: 0,\r\n    lng: 0,\r\n  });\r\n\r\n  const mapUrls = {\r\n    base: \"https://xdworld.vworld.kr/2d/Base/201612/{z}/{x}/{y}.png\",\r\n    hybrid: \"https://xdworld.vworld.kr/2d/Hybrid/201612/{z}/{x}/{y}.png\",\r\n    satellite: \"https://xdworld.vworld.kr/2d/Satellite/201612/{z}/{x}/{y}.jpeg\",\r\n  };\r\n\r\n  const onClickMap = (e) => {\r\n    setMarker(e.latlng);\r\n  };\r\n\r\n  return (\r\n    <Map\r\n      center={[35.9078, 127.7669]}\r\n      zoom={7.45}\r\n      style={{ width: \"100%\" }}\r\n      onClick={onClickMap}\r\n    >\r\n      <ScaleControl\r\n        metric={true}\r\n        imperial={false}\r\n        ScaleControl={true}\r\n      ></ScaleControl>\r\n      <TileLayer url={mapUrls.satellite} attribution=\"VWORLD\" />\r\n      <WMSTileLayer url={mapUrls.hybrid} />\r\n      <Marker position={[marker.lat, marker.lng]}></Marker>\r\n      {spots !== undefined\r\n        ? spots.map((spot) => (\r\n            <Marker position={[spot.lat, spot.lng]}>\r\n              <Tooltip>{spot.name}</Tooltip>\r\n            </Marker>\r\n          ))\r\n        : null}\r\n    </Map>\r\n  );\r\n};\r\n\r\nexport default MapContainer;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport MapContainer from \"../src/components/MapContainer\";\nimport XLSX from \"xlsx\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  width: 100%;\n  height: 100vh;\n`;\n\nconst RightSectionWrapper = styled.div`\n  width: 25%;\n  padding: 0.5rem;\n  margin: 0;\n  box-sizing: border-box;\n  font-size: 11px;\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  background: lightblue;\n  overflow-x: hidden;\n  padding: 0;\n  margin: 0;\n`;\n\nfunction App() {\n  const [selectedArea, setSelectedArea] = useState({\n    id: 0,\n    areaName_eng: \"korea\",\n    areaName_kor: \"대한민국\",\n    location: { cityName_eng: \"\", cityName_kor: \"\" },\n    municipalLevelDivisionCode: null,\n    crops: [],\n    crops_kor: [],\n    cropsInfo: [{ id: null, name: null, name_kor: null, icon: null }],\n    mapInfo: {\n      coordinate: { lat: 35.9078, lng: 127.7669 },\n      zoom: 7.45,\n    },\n  });\n  const [files, setFiles] = useState(\"\");\n  const [spots, setSpots] = useState();\n\n  const handleChange3 = (e) => {\n    const selectedFile = e.target.files[0];\n    const fileReader = new FileReader();\n    fileReader.onload = function (event) {\n      var data = event.target.result;\n\n      var workbook = XLSX.read(data, {\n        type: \"binary\",\n      });\n      workbook.SheetNames.forEach((sheet) => {\n        let rowObject = XLSX.utils.sheet_to_row_object_array(\n          workbook.Sheets[sheet]\n        );\n        let jsonObject = JSON.stringify(rowObject);\n        let jsObject = JSON.parse(jsonObject);\n        setFiles(jsObject);\n        setSpots(jsObject);\n      });\n    };\n    fileReader.readAsBinaryString(selectedFile);\n  };\n\n  return (\n    <>\n      <Wrapper>\n        <MapContainer selectedArea={selectedArea} spots={spots} />\n        <RightSectionWrapper>\n          <Input type=\"file\" onChange={handleChange3} />\n        </RightSectionWrapper>\n      </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}