{"version":3,"sources":["utils/DateUtils.js","components/InformationInTooltip.js","components/InformationInPopup.js","components/MapContainer.js","components/ConvertCsvIntoTable.js","components/ExplainHowToUse.js","App.js","serviceWorker.js","index.js"],"names":["ExcelDateToJSDate","date","Date","Math","round","getFormattedDate","date_string","delimeter","dd","getDate","mm","getMonth","yyyy","getFullYear","today","String","join","Wrapper","styled","div","Item","InformationInTooltip","props","data","map","item","idx","DateUtils","InformationInPopup","columns","Object","keys","col","id","MapContainer","spots","useState","lat","lng","setMarker","mapUrls","Map","center","zoom","style","width","onClick","e","latlng","ScaleControl","metric","imperial","TileLayer","url","attribution","WMSTileLayer","undefined","spot","Marker","key","position","icon","divIcon","className","iconSize","html","color","Tooltip","Popup","TableWrapper","Table","table","Th","th","Tbody","tbody","Td","td","CustomedTable","rows","items","ExplainHowToUse","ConvertCsvIntoTable","sampleTable","RightSectionWrapper","Input","input","App","areaName_eng","areaName_kor","location","cityName_eng","cityName_kor","municipalLevelDivisionCode","crops","crops_kor","cropsInfo","name","name_kor","mapInfo","coordinate","selectedArea","setSpots","type","onChange","selectedFile","target","files","fileReader","FileReader","onload","event","result","workbook","XLSX","read","SheetNames","forEach","sheet","rowObject","utils","sheet_to_row_object_array","Sheets","jsonObject","JSON","stringify","jsObject","parse","readAsBinaryString","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b86db28d.chunk.js","sourcesContent":["export function ExcelDateToJSDate(date) {\r\n  return new Date(Math.round((date - 25569) * 86400 * 1000));\r\n}\r\n\r\nexport function convertInvalidIntoValidDate(invalidDate) {\r\n  // 20200921을 '2020-09-21'로 리턴\r\n  return `${invalidDate.slice(0, 4)}-${invalidDate.slice(\r\n    4,\r\n    6\r\n  )}-${invalidDate.slice(6, 8)}`;\r\n}\r\n\r\nexport function getFormattedDate(date_string, delimeter = \"/\") {\r\n  let date = new Date(date_string);\r\n  let dd = date.getDate();\r\n  let mm = date.getMonth() + 1;\r\n  let yyyy = date.getFullYear();\r\n\r\n  if (dd < 10) {\r\n    dd = \"0\" + dd;\r\n  }\r\n\r\n  if (mm < 10) {\r\n    mm = \"0\" + mm;\r\n  }\r\n\r\n  let today = [String(yyyy), String(mm), String(dd)];\r\n  return today.join(delimeter);\r\n}\r\n\r\nexport function getHour(date) {\r\n  let newDate = new Date(date);\r\n  let hour = newDate.getHours();\r\n  return hour > 9 ? String(hour) : \"0\" + String(hour);\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport * as DateUtils from \"../utils/DateUtils\";\r\n\r\nconst Wrapper = styled.div``;\r\n\r\nconst Item = styled.div``;\r\n\r\nconst InformationInTooltip = (props) => {\r\n  const { data } = props;\r\n  const itemsInTooltip = [\"조사날짜\", \"작물명\", \"병해충명\", \"증상부위\"];\r\n\r\n  return (\r\n    <Wrapper>\r\n      {itemsInTooltip.map((item, idx) =>\r\n        item === \"조사날짜\" ? (\r\n          <Item>{`● ${item}: ${DateUtils.getFormattedDate(\r\n            DateUtils.ExcelDateToJSDate(data[item])\r\n          )}`}</Item>\r\n        ) : (\r\n          <Item>{`● ${item}: ${data[item]}`}</Item>\r\n        )\r\n      )}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default InformationInTooltip;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport * as DateUtils from \"../utils/DateUtils\";\r\n\r\nconst Wrapper = styled.div``;\r\nconst Item = styled.div``;\r\n\r\nconst InformationInPopup = (props) => {\r\n  const { data } = props;\r\n  const columns = Object.keys(data);\r\n  return (\r\n    <Wrapper>\r\n      {columns.map((col, idx) =>\r\n        col === \"조사날짜\" ? (\r\n          <Item id={idx}>{`● ${col}: ${DateUtils.getFormattedDate(\r\n            DateUtils.ExcelDateToJSDate(data[col])\r\n          )}`}</Item>\r\n        ) : (\r\n          <Item id={idx}>{`● ${col}: ${data[col]}`}</Item>\r\n        )\r\n      )}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default InformationInPopup;\r\n","import React, { useState } from \"react\";\r\nimport { divIcon } from \"leaflet\";\r\nimport {\r\n  Map,\r\n  TileLayer,\r\n  WMSTileLayer,\r\n  Marker,\r\n  Tooltip,\r\n  Popup,\r\n  ScaleControl,\r\n} from \"react-leaflet\";\r\nimport \"./MapContainer.css\";\r\n\r\nimport InformationInTooltip from \"./InformationInTooltip\";\r\nimport InformationInPopup from \"./InformationInPopup\";\r\n\r\nconst MapContainer = (props) => {\r\n  const { spots } = props;\r\n  const [marker, setMarker] = useState({\r\n    lat: 0,\r\n    lng: 0,\r\n  });\r\n\r\n  const mapUrls = {\r\n    base: \"https://xdworld.vworld.kr/2d/Base/201612/{z}/{x}/{y}.png\",\r\n    hybrid: \"https://xdworld.vworld.kr/2d/Hybrid/201612/{z}/{x}/{y}.png\",\r\n    satellite: \"https://xdworld.vworld.kr/2d/Satellite/201612/{z}/{x}/{y}.jpeg\",\r\n  };\r\n\r\n  const onClickMap = (e) => {\r\n    setMarker(e.latlng);\r\n  };\r\n\r\n  return (\r\n    <Map\r\n      center={[35.9078, 127.7669]}\r\n      zoom={7.45}\r\n      style={{ width: \"100%\" }}\r\n      onClick={onClickMap}\r\n    >\r\n      <ScaleControl\r\n        metric={true}\r\n        imperial={false}\r\n        ScaleControl={true}\r\n      ></ScaleControl>\r\n      <TileLayer url={mapUrls.satellite} attribution=\"VWORLD\" />\r\n      <WMSTileLayer url={mapUrls.hybrid} />\r\n      {/* <Marker position={[marker.lat, marker.lng]}></Marker> */}\r\n      {spots !== undefined\r\n        ? spots.map((spot, idx) => (\r\n            <Marker\r\n              key={idx}\r\n              position={[spot[\"위도\"], spot[\"경도\"]]}\r\n              icon={divIcon({\r\n                className: \"\",\r\n                iconSize: [24, 24],\r\n                html: `<div style=\"background:${\r\n                  spot.color ? spot.color : \"yellow\"\r\n                }; height:24px; border-radius:50%;\"><div/>`,\r\n              })}\r\n            >\r\n              <Tooltip>\r\n                <InformationInTooltip data={spot} />\r\n              </Tooltip>\r\n              <Popup>\r\n                <InformationInPopup data={spot} />\r\n              </Popup>\r\n            </Marker>\r\n          ))\r\n        : null}\r\n    </Map>\r\n  );\r\n};\r\n\r\nexport default MapContainer;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TableWrapper = styled.div`\r\n  width: 100%;\r\n  height: 70%;\r\n  border: None;\r\n`;\r\n\r\nconst Table = styled.table`\r\n  box-sizing: border-box;\r\n  /* border: 0.1rem solid #dddddd; */\r\n  border-collapse: collapse;\r\n  width: 100%;\r\n  text-align: center;\r\n  margin: 0.2rem;\r\n`;\r\n\r\nconst Th = styled.th`\r\n  box-sizing: border-box;\r\n  padding: 0.2rem;\r\n  border: 0.1rem solid #dddddd;\r\n  background-color: #f2f2f2;\r\n  font-weight: bold;\r\n  position: sticky;\r\n  top: 0px;\r\n`;\r\n\r\nconst Tbody = styled.tbody`\r\n  box-sizing: border-box;\r\n  width: 100%;\r\n  overflow: auto;\r\n`;\r\n\r\nconst Td = styled.td`\r\n  box-sizing: border-box;\r\n  padding: 0.2rem;\r\n  border: 0.1rem solid #dddddd;\r\n`;\r\n\r\nconst CustomedTable = (props) => {\r\n  const { rows } = props;\r\n  return (\r\n    <TableWrapper>\r\n      <Table>\r\n        <thaed>\r\n          <tr>\r\n            {rows[0].map((col) => (\r\n              <Th>{col}</Th>\r\n            ))}\r\n          </tr>\r\n          <Tbody>\r\n            {rows.map((items, idx) => (\r\n              <tr>{idx !== 0 ? items.map((item) => <Td>{item}</Td>) : null}</tr>\r\n            ))}\r\n          </Tbody>\r\n        </thaed>\r\n      </Table>\r\n    </TableWrapper>\r\n  );\r\n};\r\n\r\nexport default CustomedTable;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport ConvertCsvIntoTable from \"./ConvertCsvIntoTable\";\r\nimport sampleTable from \"../data/sampleTable.json\";\r\n\r\nconst Wrapper = styled.div`\r\n  font-size: 0.5rem;\r\n`;\r\n\r\nconst ExplainHowToUse = () => {\r\n  return (\r\n    <Wrapper>\r\n      <div>※ 업로드 파일의 샘플 예시</div>\r\n      <ConvertCsvIntoTable rows={sampleTable} />\r\n      <div>※ 주의 ※ </div>\r\n      <span>\r\n        필수 colum의 경우, 반드시 입력되어야 하며, 컬럼명이 반드시\r\n        일치해야합니다:\r\n      </span>\r\n      <h1>\"조사날짜, 작물명, color, 병해충명, 증상부위\"</h1>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default ExplainHowToUse;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport XLSX from \"xlsx\";\n\nimport MapContainer from \"../src/components/MapContainer\";\nimport ExplainHowToUse from \"../src/components/ExplainHowToUse\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  width: 100%;\n  height: 100vh;\n  font-size: 1rem;\n`;\n\nconst RightSectionWrapper = styled.div`\n  width: 25%;\n  padding: 0.5rem;\n  margin: 0;\n  box-sizing: border-box;\n  font-size: 11px;\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  background: lightblue;\n  overflow-x: hidden;\n  padding: 0;\n  margin: 0;\n`;\n\nfunction App() {\n  const [selectedArea, setSelectedArea] = useState({\n    id: 0,\n    areaName_eng: \"korea\",\n    areaName_kor: \"대한민국\",\n    location: { cityName_eng: \"\", cityName_kor: \"\" },\n    municipalLevelDivisionCode: null,\n    crops: [],\n    crops_kor: [],\n    cropsInfo: [{ id: null, name: null, name_kor: null, icon: null }],\n    mapInfo: {\n      coordinate: { lat: 35.9078, lng: 127.7669 },\n      zoom: 7.45,\n    },\n  });\n  const [spots, setSpots] = useState();\n\n  const handleChange = (e) => {\n    const selectedFile = e.target.files[0];\n    const fileReader = new FileReader();\n    fileReader.onload = function (event) {\n      var data = event.target.result;\n\n      var workbook = XLSX.read(data, {\n        type: \"binary\",\n      });\n      workbook.SheetNames.forEach((sheet) => {\n        let rowObject = XLSX.utils.sheet_to_row_object_array(\n          workbook.Sheets[sheet]\n        );\n        let jsonObject = JSON.stringify(rowObject);\n        let jsObject = JSON.parse(jsonObject);\n        setSpots(jsObject);\n      });\n    };\n    fileReader.readAsBinaryString(selectedFile);\n  };\n\n  return (\n    <>\n      <Wrapper>\n        <MapContainer selectedArea={selectedArea} spots={spots} />\n        <RightSectionWrapper>\n          <Input type=\"file\" onChange={handleChange} />\n          <ExplainHowToUse />\n        </RightSectionWrapper>\n      </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}